// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadHellowrold returns the embedded CollectionSpec for hellowrold.
func loadHellowrold() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_HellowroldBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load hellowrold: %w", err)
	}

	return spec, err
}

// loadHellowroldObjects loads hellowrold and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*hellowroldObjects
//	*hellowroldPrograms
//	*hellowroldMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadHellowroldObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadHellowrold()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// hellowroldSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hellowroldSpecs struct {
	hellowroldProgramSpecs
	hellowroldMapSpecs
}

// hellowroldSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hellowroldProgramSpecs struct {
	HandleTp *ebpf.ProgramSpec `ebpf:"handle_tp"`
}

// hellowroldMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type hellowroldMapSpecs struct {
}

// hellowroldObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadHellowroldObjects or ebpf.CollectionSpec.LoadAndAssign.
type hellowroldObjects struct {
	hellowroldPrograms
	hellowroldMaps
}

func (o *hellowroldObjects) Close() error {
	return _HellowroldClose(
		&o.hellowroldPrograms,
		&o.hellowroldMaps,
	)
}

// hellowroldMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadHellowroldObjects or ebpf.CollectionSpec.LoadAndAssign.
type hellowroldMaps struct {
}

func (m *hellowroldMaps) Close() error {
	return _HellowroldClose()
}

// hellowroldPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadHellowroldObjects or ebpf.CollectionSpec.LoadAndAssign.
type hellowroldPrograms struct {
	HandleTp *ebpf.Program `ebpf:"handle_tp"`
}

func (p *hellowroldPrograms) Close() error {
	return _HellowroldClose(
		p.HandleTp,
	)
}

func _HellowroldClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed hellowrold_bpfel.o
var _HellowroldBytes []byte
